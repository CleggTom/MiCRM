var documenterSearchIndex = {"docs":
[{"location":"pages/manual/examples/","page":"Examples","title":"Examples","text":"Placeholder for example Docs.","category":"page"},{"location":"pages/library/internal/","page":"Internal","title":"Internal","text":"Placeholder for package guide","category":"page"},{"location":"pages/manual/guide/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"pages/manual/guide/#Introduction","page":"Basic Usage","title":"Introduction","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"This page will guide you through generating and simulating the MiCRM model as described by the set of equations:","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"beginaligned\n    fracdx_idt = sum_j = 0^M x_i y_j u_ij  (1 - sum_k = 0^M l_jk) - x_i R_i \n    fracdy_jdt = rho_j - y_j omega_j - sum_i = 0^N x_i y_j u_ij + sum_i = 0^N sum_k = 0^M x_i y_k u_ik l_kj\nendaligned","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"The MiCRM package provides two ways to simulate the MiCRM system depending on your requirements:","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Directly using the DifferentialEquations package with the ODEProblem function.\nUsing the symbolic reperesntation provided by ModelingToolKit which allows symbolic manipualtion of the system in addition to numerical integration. ","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"In general we recomend using the second method with the MTK which allows for greater flexibility and is significantly faster for simulations due to the automaticly generated derivative functions and jacobian matrix. This method does however incur a significant intial computational cost whist contstructing the symbollic representation so for cases where you want to play around with system size it may be faster to use the first direct numberical intergration method. ","category":"page"},{"location":"pages/manual/guide/#Method-1:-Numerical-Integration-Only","page":"Basic Usage","title":"Method 1: Numerical Integration Only","text":"","category":"section"},{"location":"pages/manual/guide/#Method-2:-Symbolic-representation-and-ModelingToolKit","page":"Basic Usage","title":"Method 2: Symbolic representation and ModelingToolKit","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"This method requires 4 steps  is divided into x steps:","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Set parameters\nGenerate ODESystem\nConvert to ODEProblem\nSimulate system","category":"page"},{"location":"pages/manual/guide/#Setting-Parameters","page":"Basic Usage","title":"Setting Parameters","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"First we must generate a dictionary with values for the parameters of the MiCRM model. The MiCRM is described by the set of equations above which have the following set of parameters:","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Parameter Description Key Type Required?\nx_i Biomass of the ith consumer - Float64 ✖\ny_j Mass of the jth resource - Float64 ✖\nN Number of consumer populations :N Int64 ✔\nM Number of resources :M Int64 ✔\nu_ij Uptake rate of the jth resource  by the ith consumer :u Matrix{Float64} ✔\nR_i Loss term for the ith consumer :R Vector{Float64} ✔\nrho_j Inflow rate for the jth resource :ρ Vector{Float64} ✔\nomega_j Outflow term for the jresource :ω Vector{Float64} ✔\nl_jk Proportion of uptake of the jth resource leaked to the kth resource. :l Matrix{Float64} ✔","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"The parameter dictionary must have the entries indicated above with the relevant key-value pairs. To aid in the construction of these parameter the package comes with several functions to randomly generate these parameter dictionaries with different communtiy structures (see #generating communities). ","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"In this example we will choose the simplest communtiy generation function random_community which generates communities with uniform random uptake and leakage matricies. ","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"using MiCRM, Random #hide\nRandom.seed!(1) #hide\nN,M = 2,2 #set system size \nparams = random_micrm_params(N,M, 0.3) #leakage = 0.3","category":"page"},{"location":"pages/manual/guide/#Generating-the-ODESystem","page":"Basic Usage","title":"Generating the ODESystem","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Once we have our parameter dictionary we next generate an ODESystem object using the provided micrm_system function. This function takes the parameter dictionary provided, creates a symbolic representation of the MiCRM system and then wraps it in an ODESystem object. The ODESystem object is from the package ModelingToolKit and provides a symbolic represntation of the system as well as many helper functions to extract and calculate properties of interest such as the Jacobian. The function also optionally takes a threshold biomass extinction value δ below which consumer populations are considered extinct during the numerical simulations.  ","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"using MiCRM, Random #hide\nRandom.seed!(1) #hide\nN,M = 2,2 #set system size #hide\nparams = random_micrm_params(N,M, 0.3) #leakage = 0.3 #hide\n@named sys = micrm_system(params)","category":"page"},{"location":"pages/manual/guide/#Convert-to-ODEProblem","page":"Basic Usage","title":"Convert to ODEProblem","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Next we convert the ODESystem object to an ODEProblem. This is the object type that is used by the DifferentialEquations package and contains information on the simulation such as the starting biomass, simulation duration and the structure and parameters of the system. This is done by simply calling the ODEProblem constructor function on our ODESystem object. We also need to provide the inital state of our system which is provided as a vector of Pair{Num,Float64}s and a tuple for the simulation duration:","category":"page"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"using MiCRM, Random #hide\nRandom.seed!(1) #hide\nN,M = 2,2 #set system size #hide\nparams = random_micrm_params(N,M, 0.3) #leakage = 0.3 #hide\n@named sys = micrm_system(params) #hide\n#define starting mass\nu0 = fill(0.1, N+M)\nu0 = [states(sys)[i] => u0[i] for i = eachindex(u0)]\n\ntspan = (0.0, 10.0) #define tspan\n#define ODEProblem (and include automatic calculation of the jacobian)\nprob = ODEProblem(sys,u0,(0.0,100.0),[], jac = true)","category":"page"},{"location":"pages/manual/guide/#Simulate-system","page":"Basic Usage","title":"Simulate system","text":"","category":"section"},{"location":"pages/manual/guide/","page":"Basic Usage","title":"Basic Usage","text":"Finally we simualte the system using the solve function from DifferentialEquations. This can be used directly or with additional arguments specifying the solver and callbacks to be used during the simulation. This function will return a solution object which contains the trajectories of the consumers.","category":"page"},{"location":"pages/library/public/","page":"Public","title":"Public","text":"Placeholder for package guide","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MiCRM","category":"page"},{"location":"#MiCRM.jl","page":"Home","title":"MiCRM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulation of Microbial Consumer Resource (MiCRM) systems in julia.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Random generation of random MiCRM systems\nStreamlined interface for MiCRM simulations\nAutomated construction of symbolic MiCRM systems to allow calculations of Jacobian's ect.\nCommunity coallescence \n","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Depth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MiCRM.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
