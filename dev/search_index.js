var documenterSearchIndex = {"docs":
[{"location":"pages/overview/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"pages/overview/#Introduction","page":"Basic Usage","title":"Introduction","text":"","category":"section"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"This page will guide you through simulating microbial consumer resource models (MiCRMs) including community parameter generation. In general simulation of microbial communities in MiCRM.jl are done in three steps:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"Generate community parameters\nDefine system dynamics\nSimulate system","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"We will walkthrough the simulation of the basic MiCRM model given by the set of equations:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"beginaligned\n    fracdC_idt = sum_alpha = 0^M C_i R_alpha u_ialpha  (1 - lambda_alpha) - C_i m_i \n    fracdR_alphadt = rho_alpha - R_alpha omega_alpha - sum_i = 0^N C_i R_alpha u_ialpha + sum_i = 0^N sum_beta = 0^M C_i R_beta u_i beta l_beta alpha\nendaligned","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"with parameters:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"Parameter Description Key\nC_i Biomass of the ith consumer -\nR_alpha Mass of the alphath resource -\nN Number of consumer populations N\nM Number of resources M\nu_i alpha Uptake rate of the alphath resource  by the ith consumer u\nm_i Loss term for the ith consumer m\nrho_alpha Inflow rate for the alphath resource ρ\nomega_alpha Outflow term for the jresource ω\nl_alpha beta Proportion of uptake of the alphath resource leaked to the betath resource. l\nlambda_alpha Total proportion of the alphath resource leaked, same as sum_beta l_alphabeta λ","category":"page"},{"location":"pages/overview/#Generating-Community-Parameters","page":"Basic Usage","title":"Generating Community Parameters","text":"","category":"section"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"The first step of any simulation is to generate a set of parameters for a given microbial community. MiCRM.jl stores all parameters in NamedTuples which are immutable (cannot be altered once created) making them fast and (as the name would suggest) indexable by name. This makes them easy to use in the derivative function. In this example we will consider a simple unstructured community where uptake and leakage values are randomly drawn from a dirchlet distribution and all other parameters are set to 1:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"    using Distributions\n\n    #set system size and leakage\n    N,M,leakage = 10,10,0.3\n\n    #uptake\n    du = Distributions.Dirichlet(N,1.0)\n    u = copy(rand(du, M)')\n\n    #cost term\n    m = ones(N)\n\n    #inflow + outflow\n    ρ,ω = ones(M),ones(M)\n\n    #leakage\n    l = copy(rand(du,M)' .* leakage)\n\n    param = (N = N, M = M, u = u, m = m, ρ = ρ, ω = ω, l = l, λ = leakage)","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"In practice it is much more convenient to wrap this in a function. In MiCRM.jl this is all wrapped in the generate_params function. This function  takes various functions as arguments which define how the parameters in the model are generated  (see XXX for more detail). By default generate_params creates communities with random parameters as above. The code to generate a random community thus becomes:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"    using MiCRM\n\n    #set system size and leakage\n    N,M,leakage = 10,10,0.3\n\n    #generate community parameters\n    param = MiCRM.Parameters.generate_params(N,M,leakage)","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"You can of course define your own functions to generate communities (see XXX for more detail). ","category":"page"},{"location":"pages/overview/#Defining-System-Dynamics","page":"Basic Usage","title":"Defining System Dynamics","text":"","category":"section"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"Once we have a set of parameters the next step is to define the dynamics of the community we want to simulate. MiCRM.jl allows the user to specify the  dynamics of the system they wish to simulate by passing custom functions to the MiCRM.Simulations.dx! function. This process is explained in more detail XXX but briefly the user can specify dynamics depending on the parameters created in the previous step as well as additional state variables to represent external drivers such as temperature. In this example we will use the default dynamics as described above and so we can just use the MiCRM.Simulations.dx! out of the box. ","category":"page"},{"location":"pages/overview/#Simulation","page":"Basic Usage","title":"Simulation","text":"","category":"section"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"Once we have the parameters and the derivative equation we are ready to simulate the system and integrate through time. MiCRM.jl relies heavily on the brilliant DifferentialEquations.jl to do the numerical integration and it is worth having a look at the docs to get an idea of what is going on under the hood in your simulations. The simulation procedure is fairly straightforward and just requires that we first create an ODEProblem object which defines the problem for the ODE solver and then solve it with the aptly named solve function. MiCRM.jl imports a lightweight version of the DifferentialEquations.jl package to use so these functions are available when we run using MiCRM. To define the ODEProblem we need to specify the initial state of the system as well as the timespan we want to simulate over:","category":"page"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"    #inital state\n    x0 = ones(N+M)\n    #time span\n    tspan = (0.0, 10.0)\n\n    #define problem\n    prob = ODEProblem(MiCRM.Simulations.dx!, x0, tspan, param)\n    sol = solve(prob, Tsit5())","category":"page"},{"location":"pages/overview/#Analysis","page":"Basic Usage","title":"Analysis","text":"","category":"section"},{"location":"pages/overview/","page":"Basic Usage","title":"Basic Usage","text":"Once the simulation is done ","category":"page"},{"location":"pages/library/public/","page":"-","title":"-","text":"Placeholder for package guide","category":"page"},{"location":"pages/analysis/analysis/#Analysis","page":"Overview","title":"Analysis","text":"","category":"section"},{"location":"pages/parameters/community_generation/","page":"Parameter generators","title":"Parameter generators","text":"TBD: Contains info on the specific parameter generating functions included already","category":"page"},{"location":"pages/parameters/community_generation/","page":"Parameter generators","title":"Parameter generators","text":"Modules = [Parameters]\nOrder = [:function]","category":"page"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.default_m-Tuple{Any, Any, Any}","page":"Parameter generators","title":"MiCRM.Parameters.default_m","text":"default params\n\n\n\n\n\n","category":"method"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.generate_params-Tuple{Any, Any}","page":"Parameter generators","title":"MiCRM.Parameters.generate_params","text":"generate_params(N,M;f_m = default_m, f_ρ = default_ρ, \n    f_ω = default_ω, f_u = default_u, \n    f_l = default_l, kwargs...)\n\nFunction to generate parameter sets for MiCRM simualtions. Requires the system size is defined as well as the functions to generate the actual parameters used in the simulations. Extra arguments can also be passed via the kwargs argument. \n\nBy default the function generates a random MiCRM system with no structure and uptake and leakage matricies generated by Dirichlet distribitions. \n\nThe function returns a NamedTuple with all the parameters as well as a kw entry which itself is a NamedTuple with the additional arguments provided.\n\n\n\n\n\n","category":"method"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.modular_leakage-Tuple{Any, Any, Dict{Symbol, Any}}","page":"Parameter generators","title":"MiCRM.Parameters.modular_leakage","text":"modular_leakage(N,M,kw::Dict{Symbol, Any})\n\nWrapper for the modular leakage to allow it to be used in the generate_params function.\n\n\n\n\n\n","category":"method"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.modular_leakage-Tuple{Any}","page":"Parameter generators","title":"MiCRM.Parameters.modular_leakage","text":"modular_leakage(M; N_modules = 2, s_ratio = 10.0, λ = 0.5)\n\nFunction that generates a modular leakage matrix for a system with M resources with a directional leakage structure. The matrix is generated using a Dirichlet distribution such that the leakage of all resources sums to λ. \n\nThe number of modules determines how many groups of resources they are split into. For example if N_modules = 5 then the resources will be split into five groups with the first group of resources tending to leak to the second, the second to the third and so on. \n\nThe degree of to which resources leak in this constrained way (verses randomly across all resources) is determined by the s_ratio value. This controls the relative value of the dirchlet α parameters which determine how the probabiltiy density function is distributed over the different resources. A greater probabiltiy of leakage from one resource to another is obtained by setting the α values for resources to higher values. When s_ratio = 1 the proabailtiy is uniform and all resources are equally likely to be leaked to each other. When s_ratio >1 then resources are more likely to leak to resources thier own or the next module in the sequence. \n\n\n\n\n\n","category":"method"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.modular_uptake-Tuple{Any, Any, Any}","page":"Parameter generators","title":"MiCRM.Parameters.modular_uptake","text":"modular_uptake(N,M,kw)\n\nWrapper for the modular uptake to allow it to be used in the generate_params function.\n\n\n\n\n\n","category":"method"},{"location":"pages/parameters/community_generation/#MiCRM.Parameters.modular_uptake-Tuple{Any, Any}","page":"Parameter generators","title":"MiCRM.Parameters.modular_uptake","text":"modular_uptake(N,M; N_modules = 2, s_ratio = 10.0)\n\nFunction that generates a modular uptake matrix for a system with N consumers and M resources. The matrix is generated using a Dirichlet distribution such that the uptake of all consumers sums to 1. \n\nThe number of modules determines how many groups of resources the consumers are specialised over. For example if N_modules = 2 then the resources will be split into two groups with half the consumers specialising on one and half on the other. \n\nThe degree of specialisation is determined by the s_ratio value. This controls the relative value of the dirchlet α parameters which determine how the probabiltiy density function is distributed over the different resources. Specialisation is obtained by setting the α values for resources that specialists consume to higher values meaning they have a higher probablity of a larger value. When s_ratio = 1 the proabailtiy is uniform and all resources are equally likely to be consumed. When s_ratio >1 then consumers are more likely to consume resources within thier module. \n\n\n\n\n\n","category":"method"},{"location":"pages/analysis/local_stability/#Local-analysis","page":"Local Stability Analysis","title":"Local analysis","text":"","category":"section"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"One question that we often want to ask when considering the dynamics of ecological systems is their response to perturbation. One method to answer such questions is to use local stability analysis where one linearises the system around a fixed point and then studies the dynamics of this linear system to learn about the behaviour of the system as a whole. ","category":"page"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"MiCRM.jl includes a number of tools to carry out such analysis including the automatic calculation of the jacobian matricies which define the linearised system as well as some built in functions to determine key properties of interest for the system.","category":"page"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"## Calculating the Jacobian MiCRM.jl automatically calculates the jacobian of a given system using the ForwardDiff.jl package. This provides the automatic-differentiation backend that computes the derivatives of the ODE system at equilibrium. This functionality is all contained within the Analysis.get_jac(sol) function.","category":"page"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"Analysis.get_jac","category":"page"},{"location":"pages/analysis/local_stability/#MiCRM.Analysis.get_jac","page":"Local Stability Analysis","title":"MiCRM.Analysis.get_jac","text":"get_jac(sol)\n\nNumerically calculate jacobian of system from the solution object. Assumes that the system is at equilibrium so the end state is used. \n\nExample\n\nTDB\n\n\n\n\n\nget_jac(sol::SteadyStateSolution; thresh = eps())\n\nFor SteadyState solution types\n\n\n\n\n\n","category":"function"},{"location":"pages/analysis/local_stability/#Dynamic-Measures","page":"Local Stability Analysis","title":"Dynamic Measures","text":"","category":"section"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"Once the jacobian has been calculated we can use it to calculate several key properties of interest","category":"page"},{"location":"pages/analysis/local_stability/","page":"Local Stability Analysis","title":"Local Stability Analysis","text":"Analysis.get_Rins\nAnalysis.get_stability\nAnalysis.get_reactivity\nAnalysis.get_return_rate","category":"page"},{"location":"pages/analysis/local_stability/#MiCRM.Analysis.get_Rins","page":"Local Stability Analysis","title":"MiCRM.Analysis.get_Rins","text":"get_Rins(J, t, w = ones(size(J)[1]))\n\nCaclulate the instantaneous rate of growth of the perturbation u at time t. The observation vector w can be optionally supplied to consider linear combinations of the state variables. This can include any linear combination of state variables such as the mass of specific components of the system as well as total functioning measures. \n\n\n\n\n\n","category":"function"},{"location":"pages/analysis/local_stability/#MiCRM.Analysis.get_stability","page":"Local Stability Analysis","title":"MiCRM.Analysis.get_stability","text":"get_stability(J)\n\nDetermine the stability a system given its jaccobian by testing if the real part of the leading eigenvalue is positive. \n\n\n\n\n\n","category":"function"},{"location":"pages/analysis/local_stability/#MiCRM.Analysis.get_reactivity","page":"Local Stability Analysis","title":"MiCRM.Analysis.get_reactivity","text":"get_reactivity(J,u)\n\nTest wether the system is \"reactive\" to the perturbation u. A reactive is system is one where the initial perturbation is amplified so that the deviation from equilibrium initially increases \n\n\n\n\n\n","category":"function"},{"location":"pages/analysis/local_stability/#MiCRM.Analysis.get_return_rate","page":"Local Stability Analysis","title":"MiCRM.Analysis.get_return_rate","text":"get_return_rate(J)\n\nget the rate of return of the system from perturbation. This value is determined by the leading eigenvalue regardless of the direction of the perturbation or the observation vector we choose. \n\n\n\n\n\n","category":"function"},{"location":"pages/parameters/coalescence/","page":"Coalescence","title":"Coalescence","text":"coalescence docs. ","category":"page"},{"location":"pages/simulations/custom_dynamics/#Defining-System-Dynamics","page":"Custom Dynamics","title":"Defining System Dynamics","text":"","category":"section"},{"location":"pages/simulations/custom_dynamics/","page":"Custom Dynamics","title":"Custom Dynamics","text":"This page will explain how to define custom dynamics for ones MiCRM system","category":"page"},{"location":"pages/simulations/custom_dynamics/#Basic-Modifications","page":"Custom Dynamics","title":"Basic Modifications","text":"","category":"section"},{"location":"pages/simulations/custom_dynamics/","page":"Custom Dynamics","title":"Custom Dynamics","text":"We can do basic modifications such as including an alternative functional response of uptake","category":"page"},{"location":"pages/simulations/custom_dynamics/#Advanced-Modifications","page":"Custom Dynamics","title":"Advanced Modifications","text":"","category":"section"},{"location":"pages/simulations/custom_dynamics/","page":"Custom Dynamics","title":"Custom Dynamics","text":"We can also do advanced modifications such as including additional state variables ","category":"page"},{"location":"pages/library/internal/","page":"-","title":"-","text":"Placeholder for package guide","category":"page"},{"location":"pages/parameters/parameters/#Parameters","page":"Overview","title":"Parameters","text":"","category":"section"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"The MiCRM.Parameters sub-module contains functions to automatically generate parameter sets for the MiCRM model. This page will give a general overview of how these functions work and interface with the Simulation sub-module.","category":"page"},{"location":"pages/parameters/parameters/#Parameters-in-MiCRM.jl","page":"Overview","title":"Parameters in MiCRM.jl","text":"","category":"section"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"Parameters in the MiCRM.jl package are all stored in NamedTuple objects. This makes them both easy and efficient to access at the small cost that they cannot be modified once created. The parameter sets are split into two parts. First is the set of basic parameters used in the classic MiCRM model. These are directly accessible by from the parameter object (i.e. p.u) and used by the default derivative functions (see REF). Second are the optional parameters stored in the kwargument within. This second kw NamedTuple stores additional parameters that may be needed when users make modification to the dynamic equations. The parameters are listed in table below:","category":"page"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"Parameter Description Key\nC_i Biomass of the ith consumer -\nR_alpha Mass of the alphath resource -\nN Number of consumer populations N\nM Number of resources M\nu_i alpha Uptake rate of the alphath resource  by the ith consumer u\nm_i Loss term for the ith consumer m\nrho_alpha Inflow rate for the alphath resource ρ\nomega_alpha Outflow term for the jresource ω\nl_alpha beta Proportion of uptake of the alphath resource leaked to the betath resource. l\nkw Additional parameters to be used ","category":"page"},{"location":"pages/parameters/parameters/#Generating-Parameter-Sets","page":"Overview","title":"Generating Parameter Sets","text":"","category":"section"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"MiCRM.jl comes with a convenience function to generate these parameter dictionaries in the form of the Parameters.generate_params function. This function takes a set of functions as arguments that dictate the rules by which the various parameters of the model are defined. It then returns them as a NamedTuple to be used in the actual simulations. This makes it relatively simple to generate many randomly generated communities when running high numbers of simulations. ","category":"page"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"Parameters.generate_params","category":"page"},{"location":"pages/parameters/parameters/#MiCRM.Parameters.generate_params","page":"Overview","title":"MiCRM.Parameters.generate_params","text":"generate_params(N,M;f_m = default_m, f_ρ = default_ρ, \n    f_ω = default_ω, f_u = default_u, \n    f_l = default_l, kwargs...)\n\nFunction to generate parameter sets for MiCRM simualtions. Requires the system size is defined as well as the functions to generate the actual parameters used in the simulations. Extra arguments can also be passed via the kwargs argument. \n\nBy default the function generates a random MiCRM system with no structure and uptake and leakage matricies generated by Dirichlet distribitions. \n\nThe function returns a NamedTuple with all the parameters as well as a kw entry which itself is a NamedTuple with the additional arguments provided.\n\n\n\n\n\n","category":"function"},{"location":"pages/parameters/parameters/","page":"Overview","title":"Overview","text":"There are a few in-built parameter generator functions in MiCRM.jl (see REF) but one can easily specify their own generating functions to determine the rules by which parameter sets are generated.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MiCRM","category":"page"},{"location":"#MiCRM.jl","page":"Home","title":"MiCRM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulation of Microbial Consumer Resource (MiCRM) systems in julia.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Random generation of random MiCRM systems\nStreamlined interface for MiCRM simulations\nCommunity coalescence ","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Depth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MiCRM.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
